#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, r32f) uniform readonly image2D levelSet0;
layout (binding = 1, r32f) uniform image2D levelSet;
layout(push_constant) uniform PushConsts
{
    float delta;
} consts;

const float dx = 1.0;

float g(float s, float w, float wxp, float wxn, float wyp, float wyn)
{
    float a = (w - wxn) / dx;
    float b = (wxp - w) / dx;
    float c = (w - wyn) / dx;
    float d = (wyp - w) / dx;

    if (s > 0)
    {
        float ap = max(a,0);
        float bn = min(b,0);
        float cp = max(c,0);
        float dn = min(d,0);

        return sqrt(max(ap * ap, bn * bn) + max(cp * cp, dn * dn)) - 1.0;
    }
    else
    {
        float an = min(a,0);
        float bp = max(b,0);
        float cn = min(c,0);
        float dp = max(d,0);

        return sqrt(max(an * an, bp * bp) + max(cn * cn, dp * dp)) - 1.0;
    }
}

void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID);

    float w0 = imageLoad(levelSet0, pos).x;
    float wxp0 = imageLoad(levelSet0, pos + ivec2(1,0)).x;
    float wxn0 = imageLoad(levelSet0, pos + ivec2(-1,0)).x;
    float wyp0 = imageLoad(levelSet0, pos + ivec2(0,1)).x;
    float wyn0 = imageLoad(levelSet0, pos + ivec2(0,-1)).x;

    float w = imageLoad(levelSet, pos).x;
    float wxp = imageLoad(levelSet, pos + ivec2(1,0)).x;
    float wxn = imageLoad(levelSet, pos + ivec2(-1,0)).x;
    float wyp = imageLoad(levelSet, pos + ivec2(0,1)).x;
    float wyn = imageLoad(levelSet, pos + ivec2(0,-1)).x;

    float s = sign(w0);

    if (w0 * wxp0 < 0.0 || w0 * wxn0 < 0.0 || w0 * wyp0 < 0.0 || w0 * wyn0 < 0.0)
    {
        float wx0 = max(max(abs(0.5 * (wxp0 - wxn0)),
                            abs(wxp0 - w0)),
                            max(abs(w0 - wxn0),
                            0.001));
        float wy0 = max(max(abs(0.5 * (wyp0 - wyn0)),
                            abs(wyp0 - w0)),
                            max(abs(w0 - wyn0),
                            0.001));
        float d = dx * w0 / sqrt(wx0 * wx0 + wy0 * wy0);

        imageStore(levelSet, pos, vec4(w - consts.delta * (s * abs(w) - d) / dx, 0.0, 0.0, 0.0));
    }
    else
    {
        imageStore(levelSet, pos, vec4(w - consts.delta * s * g(s, w, wxp, wxn, wyp, wyn), 0.0, 0.0, 0.0));
    }
}
