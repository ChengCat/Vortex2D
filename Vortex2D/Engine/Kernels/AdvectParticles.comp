#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x_id = 1, local_size_y_id = 2) in;

layout(push_constant) uniform Consts
{
  int width;
  int height;
  float delta;
}consts;

// TODO should move this somewhere common since it's used in multiple places
struct Particle
{
  vec2 Position;
  vec2 Velocity;
};

layout(std430, binding = 0) buffer Particles
{
  Particle value[];
}particles;

struct DispatchParams
{
    uint x;
    uint y;
    uint z;
    uint count;
};

layout(std430, binding = 1) buffer Params
{
    DispatchParams params;
};

layout(binding = 2, rg32f) uniform image2D Velocity;
layout(binding = 3, r32f) uniform image2D SolidPhi;

#include "CommonAdvect.comp"

float interpolate_phi(vec2 xy)
{
    ivec2 ij = ivec2(floor(xy));
    vec2 f = xy - vec2(ij);

    return mix(mix(imageLoad(SolidPhi, ij + ivec2(0, 0)).x, imageLoad(SolidPhi, ij + ivec2(1, 0)).x, f.x),
               mix(imageLoad(SolidPhi, ij + ivec2(0, 1)).x, imageLoad(SolidPhi, ij + ivec2(1, 1)).x, f.x),
               f.y);
}

vec2 interpolate_gradient(vec2 xy)
{
    ivec2 ij = ivec2(floor(xy));
    vec2 f = xy - vec2(ij);

    float v00 = imageLoad(SolidPhi, ij).x;
    float v10 = imageLoad(SolidPhi, ij + ivec2(1,0)).x;
    float v01 = imageLoad(SolidPhi, ij + ivec2(0,1)).x;
    float v11 = imageLoad(SolidPhi, ij + ivec2(1,1)).x;

    return vec2(mix(v10 - v00, v11 - v01, f.y), mix(v01 - v00, v11 - v10, f.x));
}

void main()
{
    uint index = gl_GlobalInvocationID.x;
    // TODO also check is within bounds with width/height?
    if (index < params.count)
    {
        particles.value[index].Position = trace_rk3(particles.value[index].Position, -consts.delta);

        float phi = interpolate_phi(particles.value[index].Position);
        if (phi < 0.0)
        {
            vec2 normal = interpolate_gradient(particles.value[index].Position);
            normal /= sqrt(dot(normal, normal));
            // NOTE this assumes that dx of phi is 1
            particles.value[index].Position -= phi * normal;
        }
    }
}
