#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

layout (local_size_x_id = 1, local_size_y_id = 2) in;

layout(push_constant) uniform Consts
{
  int width;
  float alpha;
}consts;

#include "CommonParticles.comp"

layout(std430, binding = 0) buffer Particles
{
  Particle value[];
}particles;

struct DispatchParams
{
    uint x;
    uint y;
    uint z;
    uint count;
};

layout(std430, binding = 1) buffer Params
{
    DispatchParams params;
};

layout(binding = 2, rgba32f) uniform image2D Velocity;
layout(binding = 3, rgba32f) uniform image2D DVelocity;

#include "CommonAdvect.comp"

// TODO use cubic interpolation instead
float interpolate_value_d(vec2 xy, int i)
{
    ivec2 ij = ivec2(floor(xy));
    vec2 f = xy - vec2(ij);

    return mix(mix(imageLoad(DVelocity, ij + ivec2(0, 0))[i], imageLoad(DVelocity, ij + ivec2(1, 0))[i], f.x),
               mix(imageLoad(DVelocity, ij + ivec2(0, 1))[i], imageLoad(DVelocity, ij + ivec2(1, 1))[i], f.x),
               f.y);
}

vec2 get_dvelocity(vec2 xy)
{
    float u = interpolate_value_d(xy - vec2(0.0, 0.5), 0);
    float v = interpolate_value_d(xy - vec2(0.5, 0.0), 1);

    return vec2(u, v);
}

void main()
{
    uvec2 localSize = gl_WorkGroupSize.xy; // Hack for Mali-GPU

    uint index = gl_GlobalInvocationID.x;
    if (index < params.count)
    {
        vec2 pos = particles.value[index].Position;
        vec2 pic = get_velocity(pos);
        vec2 flip = particles.value[index].Velocity + get_dvelocity(pos);
        particles.value[index].Velocity = mix(flip, pic, consts.alpha);
    }
}
