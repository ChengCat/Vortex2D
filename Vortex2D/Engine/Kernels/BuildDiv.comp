#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x_id = 1, local_size_y_id = 2) in;

layout(push_constant) uniform Consts
{
  int width;
  int height;
}consts;

layout(std430, binding = 0) buffer Div
{
  float value[];
}div;

layout(binding = 1, r32f) uniform image2D FluidLevelSet;
layout(binding = 2, r32f) uniform image2D SolidLevelSet;
layout(binding = 3, rg32f) uniform image2D Velocity;
layout(binding = 4, rg32f) uniform image2D SolidLevelSetVelocity;

float fraction_inside(float a, float b)
{
    if(a < 0.0 && b < 0.0)
        return 1.0;
    if(a < 0.0 && b >= 0.0)
        return a / (a - b);
    if(a >= 0.0 && b < 0.0)
        return b / (b - a);
    return 0.0;
}

vec2 get_weight(ivec2 pos)
{
  vec2 weight;
  weight.x = 1.0 - fraction_inside(imageLoad(SolidLevelSet, pos + ivec2(0,1)).x,
                                   imageLoad(SolidLevelSet, pos + ivec2(0,0)).x);
  weight.y = 1.0 - fraction_inside(imageLoad(SolidLevelSet, pos + ivec2(1,0)).x,
                                   imageLoad(SolidLevelSet, pos + ivec2(0,0)).x);

  return clamp(weight, vec2(0.0), vec2(1.0));
}

vec2 get_weightxp(ivec2 pos)
{
  vec2 weight;
  weight.x = 1.0 - fraction_inside(imageLoad(SolidLevelSet, pos + ivec2(1,1)).x,
                                   imageLoad(SolidLevelSet, pos + ivec2(1,0)).x);
  weight.y = 1.0 - fraction_inside(imageLoad(SolidLevelSet, pos + ivec2(2,0)).x,
                                   imageLoad(SolidLevelSet, pos + ivec2(1,0)).x);

  return clamp(weight, vec2(0.0), vec2(1.0));
}

vec2 get_weightyp(ivec2 pos)
{
  vec2 weight;
  weight.x = 1.0 - fraction_inside(imageLoad(SolidLevelSet, pos + ivec2(0,2)).x,
                                   imageLoad(SolidLevelSet, pos + ivec2(0,1)).x);
  weight.y = 1.0 - fraction_inside(imageLoad(SolidLevelSet, pos + ivec2(1,1)).x,
                                   imageLoad(SolidLevelSet, pos + ivec2(0,1)).x);

  return clamp(weight, vec2(0.0), vec2(1.0));
}

void main()
{
  ivec2 pos = ivec2(gl_GlobalInvocationID);
  if (pos.x > 0 && pos.y > 0 && pos.x < consts.width - 1 && pos.y < consts.height - 1)
  {
    float liquid_phi = imageLoad(FluidLevelSet, pos).x;
    if (liquid_phi < 0.0)
    {
      vec2  uv  = imageLoad(Velocity, pos).xy;
      float uxp = imageLoad(Velocity, pos + ivec2(1,0)).x;
      float vyp = imageLoad(Velocity, pos + ivec2(0,1)).y;

      vec2 wuv = get_weight(pos);
      float wxp = get_weightxp(pos).x;
      float wyp = get_weightyp(pos).y;

      float b = (wuv.x * uv.x - wxp * uxp + wuv.y * uv.y - wyp * vyp) * consts.width;
      vec2 solid_uv = imageLoad(SolidLevelSetVelocity, pos).xy;
      float solid_uxp = imageLoad(SolidLevelSetVelocity, pos + ivec2(1,0)).x;
      float solid_vyp = imageLoad(SolidLevelSetVelocity, pos + ivec2(0,1)).y;

      b += ((1.0 - wxp) * solid_uxp - (1.0 - wuv.x) * solid_uv.x + (1.0 - wyp) * solid_vyp - (1.0 - wuv.y) * solid_uv.y) * consts.width;

      div.value[pos.x + pos.y * consts.width] = b;
    }
    else
    {
      div.value[pos.x + pos.y * consts.width] = 0.0;
    }
  }
}
