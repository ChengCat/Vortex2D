#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x_id = 1, local_size_y_id = 2) in;

layout(push_constant) uniform Consts
{
  int width;
  int height;
  float delta;
}consts;

layout(binding = 0, rg32f) uniform image2D Velocity;
layout(binding = 1, rg32f) uniform image2D OutVelocity;

#include "CommonAdvect.comp"

const float a = 2.0/9.0;
const float b = 3.0/9.0;
const float c = 4.0/9.0;

vec2 trace_rk3(vec2 pos)
{
    vec2 k1 = get_velocity(pos);
    vec2 k2 = get_velocity(pos - 0.5 * consts.width * consts.delta * k1);
    vec2 k3 = get_velocity(pos - 0.75 * consts.width * consts.delta * k2);
    return pos - a * consts.width * consts.delta * k1
               - b * consts.width * consts.delta * k2
               - c * consts.width * consts.delta * k3;
}

void main(void)
{
    ivec2 pos = ivec2(gl_GlobalInvocationID);
    if (pos.x >= 0 && pos.y >= 0 && pos.x < consts.width && pos.y < consts.height)
    {
        vec2 value;

        // u
        vec2 upos = trace_rk3(vec2(pos) + vec2(0.0, 0.5));
        value.x = get_velocity(upos).x;

        // v
        vec2 vpos = trace_rk3(vec2(pos) + vec2(0.5, 0.0));
        value.y = get_velocity(vpos).y;

        // store result
        imageStore(OutVelocity, pos, vec4(value, 0.0, 0.0));
    }
}
