
vec4 cubic(vec4 f1, vec4 f2, vec4 f3, vec4 f4, float xd)
{
   float xd2 = xd * xd;
   float xd3 = xd2 * xd;

   return f1*(     - 0.5*xd  +     xd2 - 0.5*xd3) +
   f2*( 1.0           - 2.5*xd2 + 1.5*xd3) +
   f3*(       0.5*xd  + 2.0*xd2 - 1.5*xd3) +
   f4*(               - 0.5*xd2 + 0.5*xd3);
}

vec4 bicubic(vec4 t[16], vec2 f)
{

   vec4 x = cubic(
                  cubic(t[0], t[4], t[8], t[12], f.y),
                  cubic(t[1], t[5], t[9], t[13], f.y),
                  cubic(t[2], t[6], t[10], t[14], f.y),
                  cubic(t[3], t[7], t[11], t[15], f.y),
                  f.x
                  );

   vec4 maxValue = max(max(t[5], t[6]), max(t[9], t[10]));
   vec4 minValue = min(min(t[5], t[6]), min(t[9], t[10]));

   return clamp(x, minValue, maxValue);
}

vec2 get_velocity(ivec2 pos)
{
   vec2 uv = imageLoad(Velocity, pos).xy;
   float up = imageLoad(Velocity, pos + ivec2(1,0)).x;
   float vp = imageLoad(Velocity, pos + ivec2(0,1)).y;

   return vec2(uv.x + up, uv.y + vp) * 0.5;
}

vec4[16] get_velocity_samples(ivec2 ij)
{
   vec4 t[16];
   for(int j = 0 ; j < 4 ; ++j)
   {
       for(int i = 0 ; i < 4 ; ++i)
       {
           t[i + 4*j] = vec4(get_velocity(ij + ivec2(i,j)), 0.0, 0.0);
       }
   }

   return t;
}

vec2 interpolate_velocity(vec2 xy)
{
   ivec2 ij = ivec2(floor(xy)) - 1;
   vec2 f = xy - (ij + 1);

   return bicubic(get_velocity_samples(ij), f).xy;
}
