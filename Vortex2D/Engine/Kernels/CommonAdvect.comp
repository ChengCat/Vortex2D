
vec4 cubic(vec4 f1, vec4 f2, vec4 f3, vec4 f4, float xd)
{
   float xd2 = xd * xd;
   float xd3 = xd2 * xd;

   return f1*(     - 0.5*xd  +     xd2 - 0.5*xd3) +
          f2*( 1.0           - 2.5*xd2 + 1.5*xd3) +
          f3*(       0.5*xd  + 2.0*xd2 - 1.5*xd3) +
          f4*(               - 0.5*xd2 + 0.5*xd3);
}

vec4 bicubic(vec4 t[16], vec2 f)
{

   vec4 x = cubic(
                  cubic(t[0], t[4], t[8], t[12], f.y),
                  cubic(t[1], t[5], t[9], t[13], f.y),
                  cubic(t[2], t[6], t[10], t[14], f.y),
                  cubic(t[3], t[7], t[11], t[15], f.y),
                  f.x
                  );

   vec4 maxValue = max(max(t[5], t[6]), max(t[9], t[10]));
   vec4 minValue = min(min(t[5], t[6]), min(t[9], t[10]));

   return clamp(x, minValue, maxValue);
}

vec4[16] get_samples(ivec2 ij)
{
   vec4 t[16];
   for(int j = 0 ; j < 4 ; ++j)
   {
       for(int i = 0 ; i < 4 ; ++i)
       {
           t[i + 4*j] = imageLoad(Velocity, ij + ivec2(i,j));
       }
   }
   return t;
}

// TODO use cubic interpolation instead
float interpolate_value_u(vec2 xy)
{
    ivec2 ij = ivec2(floor(xy));
    vec2 f = xy - vec2(ij);

    return mix(mix(imageLoad(Velocity, ij + ivec2(0, 0)).x, imageLoad(Velocity, ij + ivec2(1, 0)).x, f.x),
               mix(imageLoad(Velocity, ij + ivec2(0, 1)).x, imageLoad(Velocity, ij + ivec2(1, 1)).x, f.x),
               f.y);
}

// TODO use cubic interpolation instead
float interpolate_value_v(vec2 xy)
{
    ivec2 ij = ivec2(floor(xy));
    vec2 f = xy - vec2(ij);

    return mix(mix(imageLoad(Velocity, ij + ivec2(0, 0)).y, imageLoad(Velocity, ij + ivec2(1, 0)).y, f.x),
               mix(imageLoad(Velocity, ij + ivec2(0, 1)).y, imageLoad(Velocity, ij + ivec2(1, 1)).y, f.x),
               f.y);
}

vec2 get_velocity(vec2 xy)
{
    float u = interpolate_value_u(xy - vec2(0.0, 0.5));
    float v = interpolate_value_v(xy - vec2(0.5, 0.0));

    return vec2(u, v);
}

const float a = 2.0/9.0;
const float b = 3.0/9.0;
const float c = 4.0/9.0;

vec2 trace_rk3(vec2 pos)
{
    vec2 k1 = get_velocity(pos);
    vec2 k2 = get_velocity(pos - 0.5 * consts.width * consts.delta * k1);
    vec2 k3 = get_velocity(pos - 0.75 * consts.width * consts.delta * k2);
    return pos - a * consts.width * consts.delta * k1
               - b * consts.width * consts.delta * k2
               - c * consts.width * consts.delta * k3;
}
