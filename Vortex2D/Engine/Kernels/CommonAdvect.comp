
vec4 cubic(vec4 f1, vec4 f2, vec4 f3, vec4 f4, float xd)
{
    const float q = 1.0 / 2.0;
    const float t = 1.0 / 3.0;
    const float s = 1.0 / 6.0;

    float xd2 = xd * xd;
    float xd3 = xd2 * xd;

    return f1*(    - t*xd + q*xd2 - s*xd3) +
           f2*(1.0 - q*xd - xd2   + q*xd3) +
           f3*(      xd   + q*xd2 - q*xd3) +
           f4*(    - s*xd         + s*xd3);
}

vec4 bicubic(vec4 t[16], vec2 f)
{
    vec4 x = cubic(
              cubic(t[0], t[4], t[8], t[12], f.y),
              cubic(t[1], t[5], t[9], t[13], f.y),
              cubic(t[2], t[6], t[10], t[14], f.y),
              cubic(t[3], t[7], t[11], t[15], f.y),
              f.x);

    vec4 maxValue = max(max(t[5], t[6]), max(t[9], t[10]));
    vec4 minValue = min(min(t[5], t[6]), min(t[9], t[10]));

    return clamp(x, minValue, maxValue);
}

vec4[16] get_samples(ivec2 ij)
{
   ivec2 size = imageSize(Velocity);

   vec4 t[16];
   for(int j = 0; j < 4; ++j)
   {
       for(int i = 0; i < 4; ++i)
       {
           ivec2 pos = ij + ivec2(i,j) - ivec2(1);
           pos = clamp(pos, ivec2(0, 0), ivec2(size.x - 1, size.y - 1));
           t[i + 4*j] = imageLoad(Velocity, pos);
       }
   }
   return t;
}

float bicubic_interpolate_value(vec2 xy, int i)
{
    ivec2 ij = ivec2(floor(xy));
    vec2 f = xy - vec2(ij);

    vec4 t[16] = get_samples(ij);
    return bicubic(t, f)[i];
}

float linear_interpolate_value(vec2 xy, int i)
{
    ivec2 ij = ivec2(floor(xy));
    vec2 f = xy - vec2(ij);

    return mix(mix(imageLoad(Velocity, ij + ivec2(0, 0))[i], imageLoad(Velocity, ij + ivec2(1, 0))[i], f.x),
               mix(imageLoad(Velocity, ij + ivec2(0, 1))[i], imageLoad(Velocity, ij + ivec2(1, 1))[i], f.x),
               f.y);
}

vec2 get_velocity(vec2 xy)
{
    vec2 vel;
    if (interpolationMode == 0)
    {
        vel.x = linear_interpolate_value(xy - vec2(0.0, 0.5), 0);
        vel.y = linear_interpolate_value(xy - vec2(0.5, 0.0), 1);
    }
    else
    {
        vel.x = bicubic_interpolate_value(xy - vec2(0.0, 0.5), 0);
        vel.y = bicubic_interpolate_value(xy - vec2(0.5, 0.0), 1);
    }

    return vel;
}

const float a = 2.0/9.0;
const float b = 3.0/9.0;
const float c = 4.0/9.0;

vec2 velocity_trace_rk3(vec2 pos, float delta)
{
    int width = imageSize(Velocity).x;

    vec2 k1 = get_velocity(pos * width);
    vec2 k2 = get_velocity(pos * width - 0.5 * width * delta * k1);
    vec2 k3 = get_velocity(pos * width - 0.75 * width * delta * k2);
    return     - a * delta * k1
               - b * delta * k2
               - c * delta * k3;
}
