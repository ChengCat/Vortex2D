#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x_id = 1, local_size_y_id = 2) in;

layout(push_constant) uniform Consts
{
  int width;
  int height;
}consts;

struct A
{
  vec4 weights;
  float diagonal;
};

layout(std430, binding = 0) buffer Matrix
{
  A data[];
}matrix;

layout(std430, binding = 1) buffer Input1
{
  float value[];
}pressure;

layout(std430, binding = 2) buffer Input2
{
  float value[];
}z;

void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID);
    if (pos.x > 0 && pos.y > 0 && pos.x < consts.width - 1 && pos.y < consts.height - 1)
    {
        int index = pos.x + pos.y * consts.width;

        vec4 diagonalWeights;
        diagonalWeights.x = -matrix.data[index + 1].diagonal;
        diagonalWeights.y = -matrix.data[index - 1].diagonal;
        diagonalWeights.z = -matrix.data[index + consts.width].diagonal;
        diagonalWeights.w = -matrix.data[index - consts.width].diagonal;

        vec4 weights = matrix.data[index].weights;
        vec4 kWeights;
        kWeights.x = diagonalWeights.x == 0.0 ? 0.0 : weights.x / diagonalWeights.x;
        kWeights.y = diagonalWeights.y == 0.0 ? 0.0 : weights.y / diagonalWeights.y;
        kWeights.z = diagonalWeights.z == 0.0 ? 0.0 : weights.z / diagonalWeights.z;
        kWeights.w = diagonalWeights.w == 0.0 ? 0.0 : weights.w / diagonalWeights.w;

        float diagonal = matrix.data[index].diagonal;

        if (diagonal != 0.0)
        {
        float centre = dot(weights.yw, kWeights.yw) / diagonal;

        vec4 p;
        p.x = pressure.value[index + 1];
        p.y = pressure.value[index - 1];
        p.z = pressure.value[index + consts.width];
        p.w = pressure.value[index - consts.width];

        float x = pressure.value[index];
        z.value[index] = x * centre + dot(p, kWeights);
        }
    }
}
