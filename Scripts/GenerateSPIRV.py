import argparse
import subprocess
import ntpath

parser = argparse.ArgumentParser(description='Compile to SPIRV and generate header/implementation')
parser.add_argument('files', metavar='files', nargs='+', help='list of glsl files')
parser.add_argument('--output', action='store', dest='output', help='output file')
parser.add_argument('--compiler', action='store', dest='compiler', help='location of spirv compiler')

args = parser.parse_args()

def genCArray(file):
  basename = ntpath.basename(file).replace('.', '_')
  content = subprocess.check_output([args.compiler,'-c',file,'-mfmt=num','-o','-']).decode('utf-8')
  array = 'const uint32_t _' + basename + '[] = {\n' + content + '\n};\n'
  spirv = 'Vortex2D::Renderer::SpirvBinary ' + basename + '(_' + basename + ');\n'
  return array + spirv

def genCArrayDef(file):
  basename = ntpath.basename(file).replace('.', '_')
  return 'extern Vortex2D::Renderer::SpirvBinary ' + basename + ';\n'

output = ntpath.basename(args.output)

with open(args.output + '.h', 'w') as f:
  f.write('/* This header is autogenerated */\n')
  f.write('#ifndef GENERATED_' + output.upper() +'_H\n')
  f.write('#define GENERATED_' + output.upper() + '_H\n\n')
  f.write('''#include <cstdint>

namespace Vortex2D
{
namespace Renderer
{
class SpirvBinary;
}

namespace SPIRV
{
''')

  for file in args.files:
    f.write(genCArrayDef(file))
    
  f.write('''
}
}

#endif

''')

with open(args.output + '.cpp', 'w') as f:
  f.write('''/* This header is autogenerated */

#include <Vortex2D/Renderer/Device.h>
''')
  f.write('#include "' + ntpath.basename(args.output) +  '.h"\n\n')
  f.write('''

namespace Vortex2D
{
namespace SPIRV
{
''')

  for file in args.files:
    f.write(genCArray(file))

  f.write('''
}
}

''')