sudo: required
dist: trusty
language: cpp

compiler:
  - gcc

branches:
  only:
    - master

# Environment variables
env:
  global:
    - GH_REPO_NAME: Vortex2D
    - DOXYFILE: Doxyfile
    - GH_REPO_REF: github.com/mmaldacker/Vortex2D.git
    - secure: "XdKG1w18LP9346CJclS4FbRTYFZImPexTHQgzQcFGimBY0teubeMUKDs2Ah+f962ndxUFOZapXgAwPW0eVV8Zq8VIS80mthjuFqOREp5AuDGHoPjz/tSNBHkcQFddSa1T7Wt4r2WvKooriuM6sj3mIm1kMHxifrGUJI4z9xLd11BESo9i3BnENqv31T9Q2sdKQJRz2pLzVgoTHOq65G4DFQZ7MYKZncaepWacJSLlKQrYIKHqsJSLL3FVQ1SBvcc93nlDwIxfrv+U7tSfRXtHD5OqVLGWMASUSr7IE//wvd+w5WCedraFoc5N7qDbgH9glGzVxl7b5UxmP74A+lfacz+ENnItdUqm7YUEhzgNbp2/th3BbcVoBk1oSaatqXR02r500kkaLFget7oU0WYt36wNX3/RyXYAUnivWNbRA4Ch9N50stkkU1q0QbshAcfCZgPPVhTZ3DVsdihxRf+wYpQCe6EOAzsF0La8XJ6hsj1BpbPUguZCeTOM/cHI9gc36wSzPhkT4QuPr0/yI2F58vtVvBOBowwm38gC9BPe/e7wALQXWj4XWFVt7uUbiuuO8mpKgTlOZNf1vLmKw9jxq84G7X4GuxgrgVavZ5UGR9IZU8H3BN+6IOEpRfan7s/JpHyeKADXUonnUobkll16JUpde6g6VJAnD2EGyqKgh0="

addons:
  apt:
    packages:
      # Vortex2D dependencies
      - doxygen
      - gdb
      # GLFW3 dependencies
      - libxrandr-dev
      - libxinerama-dev
      - libxcursor-dev
      # Mesa dependencies
      - python-mako

install:
# Mesa 13.0.4 install
  - wget ftp://ftp.freedesktop.org/pub/mesa/13.0.4/mesa-13.0.4.tar.gz
  - tar xzf mesa-13.0.4.tar.gz
  - cd mesa-13.0.4
  - ./configure --enable-opengl --disable-gles1 --disable-gles2 --with-gallium-drivers=swrast --disable-dri --with-dri-drivers= --disable-egl --with-egl-platforms= --disable-gbm --disable-glx --enable-gallium-osmesa --enable-texture-float --with-llvm-prefix=/usr --disable-va --disable-xvmc --disable-vdpau --prefix=/usr
  - make -j 4
  - sudo make install
  - cd ..

before_script:
  - ulimit -c unlimited -S       # enable core dumps

script:
  - mkdir build
  - cd build
  - cmake .. -DVORTEX2D_ENABLE_TESTS=ON -DVORTEX2D_ENABLE_EXAMPLES=ON -DVORTEX2D_USE_OSMESA=ON
  - make -j 4
  - cd Tests
  - ./vortex2d_tests

# Generate and deploy documentation
after_success:
  - cd $TRAVIS_BUILD_DIR/Docs
  - chmod +x generatePublishDocs.sh
  - ./generatePublishDocs.sh

# Check if there is a coredump and print backtrace if there is
after_failure:
- COREFILE=$(find . -maxdepth 1 -name "core*" | head -n 1) # find core file
- if [[ -f "$COREFILE" ]]; then gdb -c "$COREFILE" example -ex "thread apply all bt" -ex "set pagination 0" -batch; fi
